//go:build ignore
// +build ignore

package main

import (
	"bufio"
	"os"
	"path/filepath"
)

func main() {
	fout, err := os.OpenFile("all_plugins.go", os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0644)
	if err != nil {
		panic(err)
	}
	defer fout.Close()

	out := bufio.NewWriter(fout)
	out.WriteString("// Code generated by go generate; DO NOT EDIT.\n")
	out.WriteString("//go:generate go run all_gen.go\n")
	out.WriteString("\n")
	out.WriteString("package all\n")
	out.WriteString("\n")
	out.WriteString("import (\n")

	for _, path := range []string{"../codec", "../inlets", "../outlets", "../flows"} {
		gen(path, out)
	}

	out.WriteString(")\n")
	out.WriteString("\nconst A = \"\"\n")
	out.Flush()
}

func gen(path string, out *bufio.Writer) {
	entries, err := os.ReadDir(path)
	if err != nil {
		panic(err)
	}
	formatters := []string{}
	compressors := []string{}
	inlets := []string{}
	outlets := []string{}
	flows := []string{}

	for _, ent := range entries {
		exists := func(name string) bool {
			if _, err := os.Stat(filepath.Join(path, ent.Name(), name)); err == nil {
				return true
			}
			return false
		}
		if exists("inlet.toml") {
			inlets = append(inlets, ent.Name())
		} else if exists("outlet.toml") {
			outlets = append(outlets, ent.Name())
		} else if exists("format.toml") {
			formatters = append(formatters, ent.Name())
		} else if exists("compress.toml") {
			compressors = append(compressors, ent.Name())
		} else if exists("flow.toml") {
			flows = append(flows, ent.Name())
		}
	}

	if len(formatters) > 0 {
		out.WriteString("\t// formats\n")
		for _, f := range formatters {
			out.WriteString("\t_ \"github.com/OutOfBedlam/tine/plugin/codec/")
			out.WriteString(f)
			out.WriteString("\"\n")
		}
	}
	if len(compressors) > 0 {
		out.WriteString("\n\t// compressors\n")
		for _, c := range compressors {
			out.WriteString("\t_ \"github.com/OutOfBedlam/tine/plugin/codec/")
			out.WriteString(c)
			out.WriteString("\"\n")
		}
	}
	if len(inlets) > 0 {
		out.WriteString("\n\t// inlets\n")
		for _, inlet := range inlets {
			out.WriteString("\t_ \"github.com/OutOfBedlam/tine/plugin/inlets/")
			out.WriteString(inlet)
			out.WriteString("\"\n")
		}
	}
	if len(outlets) > 0 {
		out.WriteString("\n\t// outlets\n")
		for _, outlet := range outlets {
			out.WriteString("\t_ \"github.com/OutOfBedlam/tine/plugin/outlets/")
			out.WriteString(outlet)
			out.WriteString("\"\n")
		}
	}

	if len(flows) > 0 {
		out.WriteString("\n\t// flows\n")
		for _, p := range flows {
			out.WriteString("\t_ \"github.com/OutOfBedlam/tine/plugin/flows/")
			out.WriteString(p)
			out.WriteString("\"\n")
		}
	}
}
